* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*									      *
*									      *
*   M   M  EEEEE   SSSS   SSSS   AAA    GGG   EEEEE      V   V   11  77777    *
*   MM MM  E      S      S      A   A  G      E          V   V    1      7    *
*   M M M  EEE     SSS    SSS   AAAAA  G GGG  EEE    *   V   V    1     7     *
*   M   M  E          S      S  A   A  G   G  E           V V     1    7      *
*   M   M  EEEEE  SSSS   SSSS   A   A   GGG   EEEEE        V    11111  7      *
*									      *
*	    S	  I	N     I	    S	  T	A     R		  17	      *
*									      *
*		A game by Sam Dicker, Noah Falstein and Rich Witt	      *
*		 Copyright (c) 1983 by Williams Electronics Inc.	      *
*									      *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

*****
*
* SINISTAR MEMORY MAP ...
* 0000 - 8EAF	Reserved for Sinistar images, executive, tactics, intelligences
* 8EA0 - 8FFF	Second part of message utility.
* 9000 - 97FF	Screen mapped scratch RAM
* 9800 - 98FF	Direct Page RAM
* 9900 - BEFF	Extended RAM
* BF00 - BF7F	Message/Bookkeeping RAM
* BF80 - BFFE	DCON scratch pad RAM
* BFFF		DCON mirror $C800
* C000 - CFFF	I/O ports
* D000 - DEFF	Static RAM
* DF00 - DFFF	DCON Stack RAM
* E000 - E1FF	Reserved for Sinistar IRQ routine.
* E200 - EFEF	First part of message utility.
* EFF0 - EFFF	ROM Vectors
* F000 - FFEF	DCON
* FFF0 - FFFF	DCON Vectors
*
* DCON VECTORS ...
* 	EFF0	Reserved
* 	EFF2	SWI3
* 	EFF4	SWI2
* 	EFF6	FIRQ
* 	EFF8	IRQ
* FFFA		SWI
* FFFC		NMI
* FFFE & EFFE	RESET
*
*****
	PAGE
	NAM	MESSAGE BLOCK OUTPUT ROUTINES AND DATA
*****
*
* Rich's changes to this version:
*  The following routines now disable DMA Inhibit to write and restore the
*  	previous condition of the DMA Inhibit status when finished writing.
*  		PHROUT	(Vector OUTPHR)
*  		PHR35	(Vector OUTP35)
*  		OUTTXT	(Vector TEXT68)
*  		ERTEXT	(Vector ETEXT)
*  		OUTT35	(Vector TEXT35)
*  		ERTT35	(Vector ETEXT35)
*  A save area from MESSAV to MESLEN is provided for adding new phrases via
*  	the DISPn and LINE macros.
*  A save area from PHRSAV to PHRLEN is provided to correspond to these new
*  	phrases in the phrase table.
*  PHRNUM is SET to the last known phrase for use by the new macros.
*
*  PHRASE NUMBERS are extended from the old 0-255. to the new 0-511.
*
*****
	PAGE
	NLIST
.$PP	SET	0
.$ORG0	SET	0
.$ORG1	SET	.$ORG0
.$ORG2	SET	.$ORG1
.$ORG3	SET	.$ORG2
.$ORG4	SET	.$ORG3
.$ORG5	SET	.$ORG4
.$ORG6	SET	.$ORG5
.$ORG7	SET	.$ORG6

* push current address on org stack (8 levels) and optionally re-org
PUSHORG	MACRO	ADR
	NLIST
.$PP	SET	.$PP+1
.$ORG7	SET	.$ORG6
.$ORG6	SET	.$ORG5
.$ORG5	SET	.$ORG4
.$ORG4	SET	.$ORG3
.$ORG3	SET	.$ORG2
.$ORG2	SET	.$ORG1
.$ORG1	SET	.$ORG0
.$ORG0	SET	*
	IFNB	<ADR>
	LIST
	ORG	ADR
	NLIST
	ENDIF
	LIST
	ENDM

* pull current address off of org stack and optionally reset symbol address
PULLORG	MACRO	ADR
	NLIST
	IFNB	<ADR>
	LIST
ADR	SET	*
	NLIST
	ENDIF
	ORG	.$ORG0
.$PP	SET	.$PP-1
.$ORG0	SET	.$ORG1
.$ORG1	SET	.$ORG2
.$ORG2	SET	.$ORG3
.$ORG3	SET	.$ORG4
.$ORG4	SET	.$ORG5
.$ORG5	SET	.$ORG6
.$ORG6	SET	.$ORG7
	LIST
	ENDM

	NOGEN
	LIST
MEMCTL	EQU	$C900
PMEMCTL	EQU	$BFFF
	INCLUDE MESSEQU1.SRC
	INCLUDE MESSEQU2.SRC

*********************************************************
*							*
*	CHARACTER,MESSAGE, & BCD OUTPUT ROUTINE		*
*	 FOR A VERTICAL SCREEN				*
*							*
*	STARTED : MAY 25, 1982	BY : CARY KOLKER	*
*	MODIFIED: OCT 11, 1982	BY : BILL PFUTZENREUTER	*
*							*
*********************************************************


*	DMA EQUATES	*
* DMA BECAUSE BILL HAS IT ALREADY
DMA	EQU	$CA00	CONTROL REGISTER OF DMA
CON	EQU	DMA+1	CONSTANT WRITE REGISTER
ORG	EQU	CON+1	ORIGIN (WHERE DATA IS FROM) 2-BYTES
DES	EQU	ORG+2	DESTINATION (WHERE DATA IS TO GO) 2-BYTES
XSIZE	EQU	DES+2	HORIZONTAL SIZE (X-SIZE)
YSIZE	EQU	XSIZE+1	VERTICAL SIZE (Y-SIZE)


	PUSHORG	MESS1	START AT THE ADDRESS SPECIFIED ABOVE
	JMP	CHROUT	JUMP TO THE CHARACTER OUTPUT ROUTINE
	JMP	PHROUT	JUMP TO THE PHRASE OUTPUT ROUTINE
	JMP	BCDOUT	JUMP TO THE B.C.D. OUTPUT ROUTINE
	JMP	CHR35	JUMP TO THE CHARACTER 3X5 OUTPUT ROUTINE
	JMP	PHR35	JUMP TO THE PHRASE 3X5 OUTPUT ROUTINE
	JMP	BCD35	JUMP TO THE B.C.D. 3X5 OUTPUT ROUTINE
	JMP	OUTTEXT	JUMP TO THE TEXT 5X7 OUTPUT ROUTINE
	JMP	OUTT35	JUMP TO THE TEXT 3X5 OUTPUT ROUTINE
	FDB	FONT57	FOR BILL SO HE CAN USE THE NUMBERS
	JMP	ERTEXT	JUMP TO THE TEXT 3X5 ERASE ROUTINE
	JMP	ERTT35	JUMP TO THE TEXT 5X7 ERASE ROUTINE
	FDB	FONT35	FOR BILL SO HE CAN USE THE NUMBERS
	JMP	FONTEXP	JUMP TO THE FONT EXPANDER ROUTINE

	PAGE
*********************************************************
*							*
*	CHARACTER TABLES:				*
*		5X7 FONT FIRST				*
*		3X5 FONT SECOND				*
*							*
*********************************************************

FONT57	FDB	L0
	FDB	L1
	FDB	L2
	FDB	L3
	FDB	L4
	FDB	L5
	FDB	L6
	FDB	L7
	FDB	L8
	FDB	L9
	FDB	LSPC
	FDB	LA
	FDB	LB
	FDB	LC
	FDB	LD
	FDB	LE
	FDB	LF
	FDB	LG
	FDB	LH
	FDB	LI
	FDB	LJ
	FDB	LK
	FDB	LL
	FDB	LM
	FDB	LN
	FDB	LO
	FDB	LP
	FDB	LQ
	FDB	LR
	FDB	LS
	FDB	LT
	FDB	LU
	FDB	LV
	FDB	LW
	FDB	LX
	FDB	LY
	FDB	LZ
	FDB	LBARW
	FDB	LEQU
	FDB	LDSH
	FDB	LQUE
	FDB	LEXC
	FDB	LBRKL
	FDB	LBRKR
	FDB	LSQOT
	FDB	LCMMA
	FDB	LPER
	FDB	LSLSH
	FDB	LAMP
	FDB	LDQOT
	FDB	LCOLON
	FDB	LCUR
	FDB	LCNARW
FONE57	EQU	*

FONT35	FDB	S0
	FDB	S1
	FDB	S2
	FDB	S3
	FDB	S4
	FDB	S5
	FDB	S6
	FDB	S7
	FDB	S8
	FDB	S9
	FDB	SSPC
	FDB	SA
	FDB	SB
	FDB	SC
	FDB	SD
	FDB	SE
	FDB	SF
	FDB	SG
	FDB	SH
	FDB	SI
	FDB	SJ
	FDB	SK
	FDB	SL
	FDB	SM
	FDB	SN
	FDB	S0
	FDB	SP
	FDB	SQ
	FDB	SR
	FDB	S5
	FDB	ST
	FDB	SU
	FDB	SV
	FDB	SW
	FDB	SX
	FDB	SY
	FDB	SZ
	FDB	SBARW
	FDB	SEQU
	FDB	SDSH
	FDB	SQUE
	FDB	SEXC
	FDB	SBRKL
	FDB	SBRKR
	FDB	SSQOT
	FDB	SCMMA
	FDB	SPER
	FDB	S000
	FDB	SARRW
	FDB	SPER
	FDB	SPER
	FDB	SPER
	FDB	SPER
	IFN	(*-FONT35)-(FONE57-FONT57)	THESE 2 TABLES ARE SAME LENGTH
	 FCB	$1111	3 BY 5 FONT TABLE AND 5 BY 7 TABLE IS NOT SAME LENGTH!
	ENDIF


* define a letter
LETTER	MACRO	N1,H1,W1
N1	EQU	.$PTR
	FCB	H1!<4+W1
.$PTR	SET	.$PTR+2
	ENDM

* pack 4 bytes into 1
PACK	MACRO	B1,B2,B3,B4
	FCB	B1!.$10!<3+B1!.1!<6+B2!.$10!<1+B2!.1!<4+B3!.$10!>1+B3!.1!<2+B4!.$10!>3+B4!.1
.$PTR	SET	.$PTR+4
	ENDM

* font expander
FONTEXP	PSHS	D,X,Y,U		> uses none
	LDU	#FPACKED	starting address of packed date
	LDX	#FEXPAND	starting address of expansion ram
1$	LDA	#WDATA		stroke watchdog
	STA	WDOG
	LDA	U+		get a height an width of letter
	BEQ	3$		done?
	PSHS	A		no, get height and width in A and B
	LSRA
	LSRA
	LSRA
	LSRA
	LDB	#$F
	ANDB	S+
	STD	X++
	MUL			multiply them to get number of bytes
	LEAY	D,X		add to expansion pointer to find end
	PSHS	Y		save it on stack
2$	LDA	U+		get packed byte
	BSR	4$		expand it
	CMPX	S		last one in letter?
	BLO	2$
	LEAS	2,S		yes?, get end pointer off stack, get next size
	BRA	1$
3$	PULS	D,X,Y,U,PC
*
4$	BSR	5$		expansion loop: expand 1 into 4 bytes
5$	BSR	6$
6$	CLRB			zero expanded byte
	ASLA			get next bit of packed byte
	BCC	7$		set?
	LDB	#$10		yes, set high nibble of expanded byte
7$	ASLA			get next bit of packed byte
	BCC	8$		set?
	ORB	#1		yes, set low nibble of expanded byte
8$	STB	X+		save expanded byte
	RTS

	NLIST
* compacted font
FEXPAND	EQU	$D000		starting address of expanded font
.$PTR	SET	FEXPAND
*
FPACKED	LETTER	L1,4,6
	PACK	$00,$00,$00,$00
	PACK	$10,$00,$00,$10
	PACK	$11,$11,$11,$11
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$00,$00
	PACK	$00,$00,$00,$00
*
	LETTER	L2,4,6
	PACK	$11,$00,$01,$10
	PACK	$11,$10,$01,$11
	PACK	$11,$11,$00,$01
	PACK	$11,$01,$10,$01
	PACK	$11,$00,$11,$11
	PACK	$11,$10,$11,$10
*
	LETTER	L3,4,6
	PACK	$01,$10,$00,$00
	PACK	$11,$00,$00,$11
	PACK	$11,$00,$10,$01
	PACK	$11,$00,$10,$01
	PACK	$11,$11,$11,$11
	PACK	$01,$11,$01,$10
*
	LETTER	L4,4,6
	PACK	$00,$01,$11,$00
	PACK	$00,$01,$01,$10
	PACK	$10,$01,$00,$11
	PACK	$11,$11,$11,$11
	PACK	$11,$11,$11,$11
	PACK	$10,$01,$00,$00
*
	LETTER	L5,4,6
	PACK	$01,$10,$10,$01
	PACK	$11,$00,$11,$11
	PACK	$11,$00,$11,$01
	PACK	$11,$00,$10,$01
	PACK	$11,$11,$10,$01
	PACK	$01,$11,$00,$00
*
	LETTER	L6,4,6
	PACK	$01,$11,$11,$10
	PACK	$11,$10,$10,$11
	PACK	$11,$00,$10,$01
	PACK	$11,$00,$10,$01
	PACK	$11,$01,$10,$01
	PACK	$01,$11,$00,$00
*
	LETTER	L7,4,6
	PACK	$00,$00,$00,$11
	PACK	$11,$00,$00,$01
	PACK	$11,$11,$00,$01
	PACK	$11,$11,$11,$01
	PACK	$10,$00,$11,$11
	PACK	$00,$00,$00,$01
*
	LETTER	L8,4,6
	PACK	$01,$11,$10,$00
	PACK	$11,$10,$11,$11
	PACK	$11,$00,$01,$01
	PACK	$11,$00,$01,$01
	PACK	$11,$10,$11,$11
	PACK	$01,$11,$10,$00
*
	LETTER	L9,4,6
	PACK	$00,$00,$01,$10
	PACK	$10,$00,$11,$11
	PACK	$11,$00,$10,$01
	PACK	$01,$10,$10,$01
	PACK	$00,$11,$11,$11
	PACK	$00,$01,$11,$10
*
	LETTER	L0,4,6
	PACK	$01,$11,$11,$10
	PACK	$11,$10,$00,$11
	PACK	$11,$00,$00,$01
	PACK	$11,$00,$00,$01
	PACK	$11,$10,$00,$11
	PACK	$01,$11,$11,$10
*
	LETTER	LSPC,4,6	CHARACTER ' '
	PACK	$00,$00,$00,$00
	PACK	$00,$00,$00,$00
	PACK	$00,$00,$00,$00
	PACK	$00,$00,$00,$00
	PACK	$00,$00,$00,$00
	PACK	$00,$00,$00,$00
*
	LETTER	LA,4,6
	PACK	$11,$11,$11,$00
	PACK	$00,$11,$10,$01
	PACK	$00,$01,$11,$11
	PACK	$00,$01,$00,$11
	PACK	$11,$11,$11,$10
	PACK	$01,$11,$00,$00
*
	LETTER	LB,4,6
	PACK	$10,$00,$10,$01
	PACK	$11,$11,$11,$11
	PACK	$11,$00,$11,$01
	PACK	$10,$00,$10,$01
	PACK	$11,$01,$11,$11
	PACK	$11,$11,$00,$00
*
	LETTER	LC,4,6
	PACK	$00,$11,$11,$00
	PACK	$01,$11,$11,$10
	PACK	$11,$10,$00,$11
	PACK	$11,$00,$00,$01
	PACK	$11,$00,$00,$11
	PACK	$01,$10,$01,$10
*
	LETTER	LD,4,6
	PACK	$11,$00,$10,$01
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$00,$01
	PACK	$11,$00,$00,$01
	PACK	$11,$11,$10,$11
	PACK	$01,$11,$11,$10
*
	LETTER	LE,4,6
	PACK	$10,$00,$10,$01
	PACK	$11,$11,$11,$11
	PACK	$11,$11,$11,$01
	PACK	$11,$00,$10,$01
	PACK	$11,$00,$10,$01
	PACK	$11,$10,$00,$11
*
	LETTER	LF,4,6
	PACK	$10,$00,$10,$01
	PACK	$11,$11,$11,$11
	PACK	$11,$11,$11,$01
	PACK	$10,$00,$10,$01
	PACK	$00,$00,$10,$01
	PACK	$00,$00,$00,$11
*
	LETTER	LG,4,6
	PACK	$00,$11,$11,$00
	PACK	$01,$11,$11,$10
	PACK	$11,$10,$00,$11
	PACK	$11,$00,$00,$01
	PACK	$11,$01,$00,$11
	PACK	$01,$11,$01,$10
*
	LETTER	LH,4,6
	PACK	$11,$10,$10,$01
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$10,$00
	PACK	$00,$01,$10,$00
	PACK	$11,$11,$10,$01
	PACK	$11,$11,$11,$11
*
	LETTER	LI,4,3
	PACK	$10,$00,$00,$00
	PACK	$11,$11,$10,$01
	PACK	$11,$11,$11,$11
*
	LETTER	LJ,4,6
	PACK	$01,$11,$00,$00
	PACK	$11,$00,$00,$01
	PACK	$11,$00,$00,$01
	PACK	$11,$11,$11,$11
	PACK	$01,$11,$11,$11
	PACK	$00,$00,$01,$01
*
	LETTER	LK,4,6
	PACK	$11,$10,$01,$01
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$11,$00
	PACK	$00,$01,$10,$10
	PACK	$11,$11,$00,$11
	PACK	$11,$00,$00,$01
*
	LETTER	LL,4,6
	PACK	$10,$00,$10,$01
	PACK	$11,$11,$11,$11
	PACK	$11,$11,$00,$00
	PACK	$10,$00,$00,$00
	PACK	$10,$00,$00,$00
	PACK	$11,$00,$00,$00
*
	LETTER	LM,4,7
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$01,$11
	PACK	$00,$00,$11,$00
	PACK	$00,$01,$10,$00
	PACK	$00,$00,$11,$01
	PACK	$11,$00,$01,$11
	PACK	$11,$11,$11,$11
*
	LETTER	LN,4,6
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$01,$11
	PACK	$00,$00,$11,$00
	PACK	$00,$11,$10,$00
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$00,$01
*
	LETTER	LO,4,6
	PACK	$01,$11,$11,$10
	PACK	$11,$10,$00,$11
	PACK	$11,$00,$00,$01
	PACK	$11,$00,$00,$01
	PACK	$11,$11,$00,$11
	PACK	$01,$11,$11,$10
*
	LETTER	LP,4,6
	PACK	$10,$01,$00,$01
	PACK	$11,$11,$11,$11
	PACK	$11,$11,$10,$01
	PACK	$10,$01,$00,$01
	PACK	$00,$01,$01,$10
	PACK	$00,$01,$11,$00
*
	LETTER	LQ,4,6
	PACK	$00,$11,$11,$10
	PACK	$01,$10,$00,$11
	PACK	$01,$00,$00,$01
	PACK	$01,$11,$00,$01
	PACK	$11,$10,$00,$10
	PACK	$00,$11,$11,$10
*
	LETTER	LR,4,6
	PACK	$11,$11,$00,$01
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$11,$01
	PACK	$00,$01,$00,$01
	PACK	$11,$11,$10,$10
	PACK	$11,$00,$11,$10
*
	LETTER	LS,4,6
	PACK	$01,$10,$11,$10
	PACK	$11,$00,$01,$11
	PACK	$11,$00,$11,$11
	PACK	$11,$01,$10,$01
	PACK	$01,$11,$10,$11
	PACK	$01,$11,$00,$00
*
	LETTER	LT,4,6
	PACK	$10,$00,$00,$10
	PACK	$11,$00,$00,$11
	PACK	$11,$11,$10,$11
	PACK	$01,$11,$11,$11
	PACK	$00,$00,$00,$11
	PACK	$00,$00,$00,$01
*
	LETTER	LU,4,6
	PACK	$11,$11,$11,$11
	PACK	$11,$11,$10,$01
	PACK	$11,$00,$00,$00
	PACK	$11,$00,$00,$00
	PACK	$11,$00,$00,$01
	PACK	$01,$11,$11,$11
*
	LETTER	LV,4,6
	PACK	$00,$00,$01,$11
	PACK	$01,$11,$11,$00
	PACK	$11,$00,$00,$00
	PACK	$11,$10,$00,$00
	PACK	$01,$11,$11,$00
	PACK	$00,$00,$01,$11
*
	LETTER	LW,4,7
	PACK	$11,$11,$11,$11
	PACK	$01,$11,$00,$00
	PACK	$00,$11,$10,$00
	PACK	$00,$01,$11,$00
	PACK	$00,$11,$10,$00
	PACK	$01,$11,$00,$01
	PACK	$11,$11,$11,$11
*
	LETTER	LX,4,6
	PACK	$11,$00,$00,$01
	PACK	$11,$10,$01,$11
	PACK	$00,$11,$10,$00
	PACK	$00,$11,$11,$00
	PACK	$11,$10,$01,$11
	PACK	$10,$00,$00,$01
*
	LETTER	LY,4,6
	PACK	$00,$00,$00,$01
	PACK	$11,$00,$11,$11
	PACK	$10,$01,$10,$00
	PACK	$11,$11,$10,$00
	PACK	$01,$11,$11,$11
	PACK	$00,$00,$11,$11
*
	LETTER	LZ,4,6
	PACK	$11,$00,$00,$00
	PACK	$11,$10,$00,$11
	PACK	$11,$11,$00,$01
	PACK	$10,$01,$10,$01
	PACK	$11,$00,$11,$11
	PACK	$11,$00,$01,$11
*
	LETTER	LDSH,3,6
	PACK	$00,$00,$10,$00
	PACK	$00,$10,$00,$01
	PACK	$10,$00,$01,$10
	PACK	$00,$01,$00,$00
	PACK	$01,$00,$00,$00
*
	LETTER	LPER,1,6
	PACK	$11,$11,$00,$00
	PACK	$00,$00,$00,$00
*
	LETTER	LEXC,4,4
	PACK	$11,$00,$01,$11
	PACK	$11,$01,$11,$11
	PACK	$00,$00,$00,$00
	PACK	$00,$00,$00,$00
*
	LETTER	LBRKL,4,5
	PACK	$00,$00,$00,$00
	PACK	$00,$00,$10,$00
	PACK	$11,$11,$11,$11
	PACK	$10,$00,$00,$01
	PACK	$10,$00,$00,$01
*
	LETTER	LBRKR,4,5
	PACK	$10,$00,$00,$01
	PACK	$10,$00,$00,$01
	PACK	$11,$11,$11,$11
	PACK	$00,$00,$10,$00
	PACK	$00,$00,$00,$00
*
	LETTER	LQUE,4,5
	PACK	$00,$00,$00,$11
	PACK	$00,$00,$00,$01
	PACK	$11,$01,$11,$01
	PACK	$11,$00,$11,$11
	PACK	$00,$00,$01,$10
*
	LETTER	LDQOT,4,5
	PACK	$00,$00,$01,$11
	PACK	$00,$00,$00,$11
	PACK	$00,$00,$00,$00
	PACK	$00,$00,$01,$11
	PACK	$00,$00,$00,$11
*
	LETTER	LSQOT,4,2
	PACK	$00,$00,$01,$11
	PACK	$00,$00,$00,$11
*
	LETTER	LCUR,1,6
	PACK	$10,$10,$10,$10
	PACK	$10,$10,$10,$00
*
	LETTER	LSLSH,4,6
	PACK	$11,$00,$00,$00
	PACK	$01,$10,$00,$00
	PACK	$00,$11,$10,$00
	PACK	$00,$01,$11,$00
	PACK	$00,$00,$01,$10
	PACK	$00,$00,$00,$11
*
	LETTER	LEQU,4,6
	PACK	$00,$01,$01,$00
	PACK	$00,$01,$01,$00
	PACK	$00,$01,$01,$00
	PACK	$00,$01,$01,$00
	PACK	$00,$01,$01,$00
	PACK	$00,$01,$01,$00
*
	LETTER	LCOLON,4,4
	PACK	$00,$00,$00,$00
	PACK	$11,$00,$00,$11
	PACK	$11,$00,$00,$11
	PACK	$00,$00,$00,$00
*
	LETTER	LAMP,4,6
	PACK	$01,$11,$01,$10
	PACK	$11,$01,$10,$11
	PACK	$11,$00,$10,$01
	PACK	$11,$01,$11,$10
	PACK	$01,$11,$00,$00
	PACK	$11,$01,$00,$00
*
	LETTER	LCMMA,4,2
	PACK	$00,$10,$00,$00
	PACK	$11,$10,$00,$00
*
	LETTER	LCNARW,4,5
	PACK	$00,$00,$01,$00
	PACK	$00,$00,$01,$10
	PACK	$11,$11,$11,$11
	PACK	$00,$00,$01,$10
	PACK	$00,$00,$01,$00
*
	LETTER	LBARW,4,6
	PACK	$00,$01,$00,$00
	PACK	$00,$11,$10,$00
	PACK	$01,$11,$11,$00
	PACK	$00,$01,$00,$00
	PACK	$00,$01,$00,$00
	PACK	$00,$01,$00,$00
*
*	START OF 3 BY 5 FONT
*
	LETTER	S0,3,3 		CHARACTER '0 & O'
	PACK	$11,$11,$10,$10
	PACK	$00,$10,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	S1,3,3		CHARACTER '1'
	PACK	$10,$01,$00,$11
	PACK	$11,$10,$10,$00
	PACK	$00,$00,$00,$00
*
	LETTER	S2,3,3		CHARACTER '2'
	PACK	$11,$10,$10,$10
	PACK	$10,$10,$10,$11
	PACK	$10,$00,$00,$00
*
	LETTER	S3,3,3		CHARACTER '3'
	PACK	$10,$10,$10,$10
	PACK	$10,$10,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	S4,3,3		CHARACTER '4'
	PACK	$00,$11,$10,$00
	PACK	$10,$00,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	S5,3,3		CHARACTER '5 & S'
	PACK	$10,$11,$10,$10
	PACK	$10,$10,$11,$10
	PACK	$10,$00,$00,$00
*
	LETTER	S6,3,3		CHARACTER '6'
	PACK	$11,$11,$10,$10
	PACK	$10,$10,$11,$10
	PACK	$10,$00,$00,$00
*
	LETTER	S7,3,3		CHARACTER '7'
	PACK	$00,$00,$10,$11
	PACK	$10,$10,$00,$01
	PACK	$10,$00,$00,$00
*
	LETTER	S8,3,3		CHARACTER '8'
	PACK	$11,$11,$10,$10
	PACK	$10,$10,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	S9,3,3		CHARACTER '9'
	PACK	$00,$11,$10,$00
	PACK	$10,$10,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SSPC,1,3		CHARACTER ' '
	PACK	$00,$00,$00,$00
*
	LETTER	SA,3,3		CHARACTER 'A'
	PACK	$11,$11,$10,$00
	PACK	$10,$10,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SB,3,3		CHARACTER 'B'
	PACK	$11,$11,$10,$10
	PACK	$10,$10,$11,$01
	PACK	$10,$00,$00,$00
*
	LETTER	SC,3,3		CHARACTER 'C'
	PACK	$11,$11,$10,$10
	PACK	$00,$10,$10,$00
	PACK	$10,$00,$00,$00
*
	LETTER	SD,3,3		CHARACTER 'D'
	PACK	$11,$11,$10,$10
	PACK	$00,$10,$01,$11
	PACK	$00,$00,$00,$00
*
	LETTER	SE,3,3		CHARACTER 'E'
	PACK	$11,$11,$10,$10
	PACK	$10,$10,$10,$00
	PACK	$10,$00,$00,$00
*
	LETTER	SF,3,3		CHARACTER 'F'
	PACK	$11,$11,$10,$00
	PACK	$10,$10,$00,$00
	PACK	$10,$00,$00,$00
*
	LETTER	SG,3,3		CHARACTER 'G'
	PACK	$11,$11,$10,$10
	PACK	$00,$10,$11,$10
	PACK	$10,$00,$00,$00
*
	LETTER	SH,3,3		CHARACTER 'H'
	PACK	$11,$11,$10,$00
	PACK	$10,$00,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SI,3,3		CHARACTER 'I'
	PACK	$10,$00,$10,$11
	PACK	$11,$10,$10,$00
	PACK	$10,$00,$00,$00
*
	LETTER	SJ,3,3		CHARACTER 'J'
	PACK	$11,$00,$00,$10
	PACK	$00,$00,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SK,3,3		CHARACTER 'K'
	PACK	$11,$11,$10,$00
	PACK	$10,$00,$11,$01
	PACK	$10,$00,$00,$00
*
	LETTER	SL,3,3		CHARACTER 'L'
	PACK	$11,$11,$10,$10
	PACK	$00,$00,$10,$00
	PACK	$00,$00,$00,$00
*
	LETTER	SM,3,5		CHARACTER 'M'
	PACK	$11,$11,$10,$00
	PACK	$00,$10,$11,$11
	PACK	$10,$00,$00,$10
	PACK	$11,$11,$10,$00
*
	LETTER	SN,3,3		CHARACTER 'N'
	PACK	$11,$11,$10,$00
	PACK	$00,$10,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SP,3,3		CHARACTER 'P'
	PACK	$11,$11,$10,$00
	PACK	$10,$10,$00,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SQ,3,3		CHARACTER 'Q'
	PACK	$00,$11,$10,$01
	PACK	$00,$10,$10,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SR,3,3		CHARACTER 'R'
	PACK	$11,$11,$10,$00
	PACK	$10,$10,$11,$01
	PACK	$10,$00,$00,$00
*
	LETTER	ST,3,3		CHARACTER 'T'
	PACK	$00,$00,$10,$11
	PACK	$11,$10,$00,$00
	PACK	$10,$00,$00,$00
*
	LETTER	SU,3,3		CHARACTER 'U'
	PACK	$11,$11,$10,$10
	PACK	$00,$00,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SV,3,3		CHARACTER 'V'
	PACK	$00,$11,$10,$11
	PACK	$00,$00,$00,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SW,3,5		CHARACTER 'W'
	PACK	$11,$11,$10,$10
	PACK	$00,$00,$11,$11
	PACK	$10,$10,$00,$00
	PACK	$11,$11,$10,$00
*
	LETTER	SX,3,3		CHARACTER 'X'
	PACK	$11,$01,$10,$00
	PACK	$10,$00,$11,$01
	PACK	$10,$00,$00,$00
*
	LETTER	SY,3,3		CHARACTER 'Y'
	PACK	$00,$11,$10,$11
	PACK	$10,$00,$00,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SZ,3,3		CHARACTER 'Z'
	PACK	$11,$00,$10,$10
	PACK	$10,$10,$10,$01
	PACK	$10,$00,$00,$00
*
	LETTER	SBARW,3,3		CHARACTER '<-'
	PACK	$00,$10,$00,$01
	PACK	$11,$00,$10,$10
	PACK	$10,$00,$00,$00
*
	LETTER	SEQU,2,3		CHARACTER '='
	PACK	$01,$01,$01,$01
	PACK	$01,$01,$00,$00
*
	LETTER	SDSH,2,3		CHARACTER '-'
	PACK	$00,$10,$00,$10
	PACK	$00,$10,$00,$00
*
	LETTER	SQUE,3,3		CHARACTER '?'
	PACK	$00,$00,$10,$10
	PACK	$10,$10,$00,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SEXC,3,1		CHARACTER '!'
	PACK	$10,$11,$10,$00
*
	LETTER	SBRKL,3,3		CHARACTER '('
	PACK	$00,$10,$00,$01
	PACK	$01,$00,$10,$00
	PACK	$10,$00,$00,$00
*
	LETTER	SBRKR,3,3		CHARACTER ')'
	PACK	$10,$00,$10,$01
	PACK	$01,$00,$00,$10
	PACK	$00,$00,$00,$00
*
	LETTER	SSQOT,3,1		CHARACTER '''
	PACK	$00,$01,$10,$00
*
	LETTER	SCMMA,1,1		CHARACTER ','
	PACK	$11,$00,$00,$00
*
	LETTER	SPER,1,1		CHARACTER '.'
	PACK	$10,$00,$00,$00
*
	LETTER	S000,3,$B		CHARACTER '000'
	PACK	$11,$11,$10,$10
	PACK	$00,$10,$11,$11
	PACK	$10,$00,$00,$00
	PACK	$11,$11,$10,$10
	PACK	$00,$10,$11,$11
	PACK	$10,$00,$00,$00
	PACK	$11,$11,$10,$10
	PACK	$00,$10,$11,$11
	PACK	$10,$00,$00,$00
*
	LETTER	SARRW,3,5		CHARACTER ' ' RIGHT ARROW
	PACK	$00,$10,$00,$00
	PACK	$10,$00,$11,$11
	PACK	$10,$01,$11,$00
	PACK	$00,$10,$00,$00
*
	FCB	0			end of packed code
SRAMSAVE	SET	.$PTR

	LIST
	PULLORG	MESS1MID

	INCLUDE PHRASE.SRC

	PAGE
	PUSHORG	MESS2MID
*********************************************************
*	WARNING CHARACTER ROUTINES ARE RE-ENTERENT	*
*							*
*	5X7 CHARACTER OUTPUT ROUTINE			*
*	CHROUT - REQUIRES:				*
*		A - CONTAIN THE SELECT CHARACTER	*
*		B - CONTAIN THE COLOR TO WRITE IT IN	*
*		X - CONTAIN THE ADDRESS TO WRITE AT	*
*	 	VECTOR - OUTCHR				*
*							*
*			OR				*
*							*
*	3X5 CHARACTER OUTPUT ROUTINE			*
*	CHR35 - REQUIRES THE SAME PARAMETERS		*
*		BUT IS ONLY FOR 3X5 CHARACTERS		*
*	 	VECTOR - OUTC35				*
*							*
*	RESULT IS:					*
*		CC - IS ALTERED SLIGHTLY		*
*		D,Y,U,S,DP - REMAIN UNCHANGED		*
*							*
*	CHROUT - WILL WRITE A CHARACTER TO THE LOCATION	*
* POINTED TO BY X, WITH THE COLOR IN B, SELECT CHARACTER*
* IN A...	NOTE: THIS WILL DO A CONSTANT WRITE OF	*
* COLOR SPEC. WITH ZERO SUPRESS.	TO ERASE CALL	*
* CHROUT WITH A COLOR OF ZERO (WHEN BACKGROUND IS 0)	*
*							*
*********************************************************

CHR35	PSHS	U,Y,D,CC	SAVE THE CONDITIONS
	LDY	#FONT35	GET THE FONT TABLE OF THE CHARACTERS
	BRA	ORCC

CHROUT	PSHS	U,Y,D,CC	SAVE THE CONDITIONS
	LDY	#FONT57	GET THE FONT TABLE OF THE CHARACTERS
ORCC	ORCC	#$FF	TELL HIM NOT TO DISTURB ME WHILE I WRITE
	STB	CON	STORE THE COLOR SO WE CAN NOW USE THE D. REG.
	BSR	OUTPUT	GO TO THE NORMAL ROUTINE
	CLR	CON	RESET COLOR FOR SAM'S FAST DMA USE
	PULS	U,Y,D,CC,PC	RESTORE THE CONDITIONS WE HAD WHEN WE ENTERED


OUTPUT
	STX	DES	STORE THE DESTINATION, SO AS TO USE X AND SAVE 1-CYCLE
	ASLA		MAKE THE CHARACTER # AN ADDRESS OFFSET
	CMPA	#(FONE57-FONT57)	CHECK FOR AN ILLEGAL CHARACTER
	BLS	10$	 BR=NO ILLEGAL CHARACTER
	LDA	#CPER*2	ILLEGAL CHARACTERS ARE A PERIOD
10$	LDY	A,Y	GET THE ADDRESS OF THE ACTUAL CHARACTER DATA
	LDD	,Y++	GET THE X & Y SIZES OF THE CHARACTER
	EORA	#!HDMAFIX	-----|--FOR THE INVERTED BIT DMA
	EORB	#!HDMAFIX	-----|
	STD	XSIZE	STORE THE X & Y SIZES TO THE DMA
	STY	ORG	STORE THE ORIGIN TO THE DMA
	LDA	#$1A	READ SERIAL, WRITE BLOCK, CONSTANT SUBB, ZERO SUPPRESS
	STA	DMA	START THE DMA WITH THE SELECTED OPERATION
	EORB	#!HDMAFIX	HAVE TO UNDO IT BECAUSE OF THE INVERTED DMA'S
	INCB		(SPACE BETWEEN CHARACTERS)
	CLRA		MAKE REG.D AN OFFSET OF REG.X
	LEAX	D,X	MOVE ME TO THE NEXT SPOT
	RTS

	PAGE
*********************************************************
*	WARNING PHRASE ROUTINES ARE NOT RE-ENTERENT	*
*							*
*	PHROUT - SAME AS CHROUT EXCEPT:			*
*		A - CONTAINS A PHRASE NUMBER TO OUTPUT	*
*		AT THE ADDRESS SPECIFIED BY THE X REG.	*
*		THIS IS FOR 5X7 CHARACTER OUTPUT ONLY	*
*	 	VECTOR - OUTPHR				*
*							*
*			OR				*
*							*
*	PHR35 - SAME AS PHROUT BUT FOR 3X5 CHARACTERS	*
*		ONLY...					*
*	 	VECTOR - OUTP35				*
*							*
*	RESULTS - SAME AS CHROUT			*
*							*
*********************************************************

PHR35	PSHS	U,Y,D,CC	SAVE THE CONDITIONS
	LDY	#FONT35	GET THE (3 X 5) FONT TABLE
	BRA	ORCC1

PHROUT	PSHS	U,Y,D,CC	SAVE THE CONDITIONS
	LDY	#FONT57	GET THE (5 X 7) FONT TABLE
ORCC1	ORCC	#$FF	TELL HIM NOT TO DISTURB ME WHILE I WRITE
	STY	XSAVE	STORE TO XSAVE EVEN IF ITS Y
	STB	CON	STORE THE COLOR SO WE CAN NOW USE THE D. REG.
***
* This patch allows 8 bits of phrase number (0 - 511.) instead of the old
* 7 bits (signed 0 - 255.).	... rich
***
	tsta		* By merely checking the highest order bit of the
	bge	1$	*   phrase number, the correct place in the table
	anda	#$7F	*   can be loaded into U.  'A' is in 2nd half of PHRASE
	LDU	#PHRASE+$80+$80	* U -> THE TABLE OF PHRASES (2nd half)
	bra	2$

1$	LDU	#PHRASE		* U -> THE TABLE OF PHRASES
2$	LEAU	A,U	BECAUSE OF SIGNED OFFSETS WE HAVE TO MOVE U AHEAD
*			THEN LOAD OFF OF THE NEXT INSTRUCTION
	LDU	A,U	MOVE THE TABLE TO THAT POSITION

	lda	PMEMCTL	* Turn off the
	PSHS	A		save memory control byte
	anda	#$FB	*   DMA inhibit
	sta	PMEMCTL	*   to allow this routine
	sta	MEMCTL	*   to output it's message.

3$ 	LDA	0,U	GET THE CHARACTER POINTED TO BY Y.
	LDY	XSAVE	GET THE FONT TABLE
	JSR	OUTPUT	PUT IT OUT AND USE CHROUT'S RETURN
	TST	,U+	TEST IF THIS WAS THE LAST CHARACTER OF THE PHRASE
	BPL	3$	BRANCH IF IT WAS NOT (BIT 7 NOT SET)
*
	PULS	A		restore memory control byte
	sta	PMEMCTL	*   if it was on
	sta	MEMCTL	*   in the first place.

	CLR	CON	RESET COLOR FOR SAM'S FAST DMA USE
	PULS	U,Y,D,CC,PC	RESTORE THE CONDITIONS WE HAD WHEN WE ENTERED
	PAGE
*********************************************************
*		WARNING BCD ROUTINES ARE NOT RE-ENTERENT*
*							*
*	BCDOUT - SAME AS CHROUT EXECPT:			*
*		A - CONTAINS B.C.D. NUMBER TO OUTPUT	*
*		FOR 5X7 CHARACTER OUTPUT ONLY		*
*	 	VECTOR - OUTBCD				*
*							*
*			OR				*
*							*
*	BCD35 - SAME AS CHROUT EXECPT:			*
*		A - CONTAINS B.C.D. NUMBER TO OUTPUT	*
*		FOR 3X5 CHARACTER OUTPUT ONLY		*
*	 	VECTOR - OUTB35				*
*							*
*	RESULTS - NUMBER IS OUTPUTED SAME AS CHROUT	*
*		WITH HIGH NIBBLE WHERE X POINTED	*
*		ALSO IF HIGH NIBBLE IS GREATER THAN	*
*		9 THEN IT IS BLANKED			*
*							*
*********************************************************

BCD35	PSHS	U,Y,D,CC	SAVE THE CONDITIONS
	LDY	#FONT35	GET THE (3 X 5) FONT TABLE
	BRA	ORCC2
*
BCDOUT	PSHS	U,Y,D,CC	SAVE THE CONDITIONS
	LDY	#FONT57	GET THE (5 X 7) FONT TABLE
ORCC2	ORCC	#$FF	TELL HIM NOT TO DISTURB ME WHILE I WRITE
	STY	XSAVE	STORE TO XSAVE EVEN IF ITS Y
	STB	CON	STORE THE COLOR SO WE CAN NOW USE THE D. REG.
	LSRA		------|
	LSRA		------|--WE ONLY WANT THE UPPER NIBBLE
	LSRA		------|
	LSRA		------|
	CMPA	#$0A	CHECK TO SEE IF WE SHOULD BLANK THIS DIGIT
	BLE	1$
	LDA	#CSPC	GET A SPACE
1$	LDY	XSAVE	GET THE FONT TABLE
	JSR	OUTPUT	AND PUT THE NUMBER OUT
	LDA	1,S	GET REG.A THE B.C.D. NUMBER BACK
	ANDA	#$0F	WE ONLY WANT THE LOWER NIBBLE
	CMPA	#$0A	CHECK TO SEE IF WE SHOULD BLANK THIS DIGIT
	BLE	2$
	LDA	#CSPC	GET A SPACE
2$	LDY	XSAVE	GET THE FONT TABLE
	JSR	OUTPUT	PUT IT OUT AND USE CHROUT'S RETURN
	CLR	CON	RESET COLOR FOR SAM'S FAST DMA USE
	PULS	U,Y,D,CC,PC

	PAGE

**********************************************************************
*
* TEXT OUTPUT ROUTINE *
*		WARNING TEXT ROUTINES ARE NOT RE-ENTERENT
*			AND ALL REGISTERS ARE CREAMED
*
*	OUTTXT - WRITE A TEXT MESSASE IN 5X7 FONT
*		INPUT REG.A - TEXT MESSAGE NUMBER
*		VECTOR - TEXT68
*
*	ERTEXT - ERASE A TEXT MESSASE IN 5X7 FONT
*		INPUT REG.A - ORGINAL WRITTEN TEXT MESSAGE NUMBER
*		VECTOR - ETEXT
*
*	OUTT35 - WRITE A TEXT MESSASE IN 3X5 FONT
*		INPUT REG.A - TEXT MESSAGE NUMBER
*		VECTOR - TEXT35
*
*	ERTT35 - ERASE A TEXT MESSASE IN 3X5 FONT
*		INPUT REG.A - ORGINAL WRITTEN TEXT MESSAGE NUMBER
*		VECTOR - ETEXT35
*
* DATA IS ARRAINGED IN GROUPS OF 4 BYTES, THE LAST BYTE
*  OF THE LAST GROUP HAS THE MOST SIGNIFICANT BIT SET.
* 1ST WORD IN GROUP = SCREEN ADDRESS (IF 0 USE LAST REG.X SCREEN ADDRESS)
* 2ND BYTE IN GROUP = COLOR NIBBLE TO WRITE (IF ERASE'D, THIS IS NOT USED)
* 3RD BYTE IN GROUP = PHRASE NUMBER TO WRITE/ERASE
*
**********************************************************************
*
ERTT35	INC	FLAG	SET THE ERASE FLAG
	BRA	OUT35A
*
OUTT35	CLR	FLAG	CLEAR THE ERASE FLAG
OUT35A	LDU	#OUTP35	LOAD THE PHRASE OUTPUT ROUTINE
	BRA	OUTTX1	USE THE CODE OVER
*
ERTEXT	INC	FLAG	SET THE ERASE FLAG
	BRA	OUTTX2
*
OUTTEXT	CLR	FLAG	CLEAR THE ERASE FLAG
OUTTX2	LDU	#OUTPHR	LOAD THE PHRASE OUTPUT ROUTINE
*
OUTTX1	LDY	#TXT	GET THE TEXT TABLE
	LEAY	A,Y	FIND THE ADDRESS OF THE TEXT TO USE FROM THE TABLE
	LDY	A,Y	---|

	pshs	A	* <<< Sam, this isn't the only place to patch >>>
	lda	PMEMCTL	* Turn off the
	PSHS	A		save memory control byte
	anda	#$FB	*   DMA inhibit
	sta	PMEMCTL	*   to allow this routine
	sta	MEMCTL	*   to output it's message.
	LDA	1,S

1$	LDD	,Y++	GET THE ADDRESS TO WRITE IT AT
	BEQ	10$	BR=USE OLD ADDRRESS
	TFR	D,X
10$	LDB	,Y+	GET THE COLOR TO WRITE IT IN
	TST	FLAG	ARE WE TO ERASE THIS
	BEQ	2$	BRA= NO SO USE THE COLOR
	CLRB		HE SAYS WERE TO ERASE IT SO CLEAR THE COLOR
2$	LDA	,Y	GET THE PHRASE TO USE
	ANDA	#$7F	GET RID OF THE END OF TEXT FLAG
	JSR	,U	JSR TO THE SPECIFIED OUTPUT ROUTINE
	TST	,Y+	CHECK THE END OF TEXT FLAG B7=1 - DONE, B7=0 - NOT DONE
	BPL	1$	BRA= WERE NOT DONE YET

	STA	1,S	* <<<	Sam, this mod corresponds to the above. >>>
	PULS	A		restore memory control byte
	sta	PMEMCTL	*   if it was on
	sta	MEMCTL	*   in the first place.
	PULS	A

	RTS		RESTORE THE CONDITIONS WE HAD WHEN WE ENTERED

* * *ENDADR	EQU	*	NEXT FREE ADDRESS AFTER THIS MODULE
* * *LENGTH	EQU	*-MESS	TOTAL BYTE LENGTH OF MODULE (IN HEX)
	PULLORG	MESS2END
	END
