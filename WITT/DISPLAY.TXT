	Messages may are displayed for two primary purposes.

		1) A message to be sent to the player at some event time.
		2) A message to be address anywhere on the screen.

Messages to the Player

	The message area to the player provides space for either one line
of 6x8 pixel characters or two lines of 3x5 pixel characters.  Messages may
be posted at any time and will automatically be erased in about 3 seconds.
New messages may be posted to replace previous messages whether or not the
old messages have been automatically erased.  To reiterate, the longest life
of a message will be about 3 seconds, at which time it will automatically
erase.


DISPLAY

	Messages may be addressed to the player by first invoking the DISPLAY
macro.  This macro causes the message area to be cleared of any previous
message.  This is only preparation for the message which will actually be
posted by invoking the PHRASE or WORD macros.  The DISPLAY macro prepares
the starting position of the message text.  Examples will be given below.


PHRASE	color,size,words

	Once the DISPLAY or TEXT (described below) macro has been invoked,
a message phrase may be displayed.  This phrase consists of a series of
words separated by commas.  The color in which these words are to appear
may be any of the following.

		BLACK		PINK
		BLUE		PURPLE
		BLUEGREY	RED
		BURGANDY	TANGREY
		CREAM		WHITE
		GREY		YELLOW

The size of the characters in each word may be specified as

	35	for 3x5 pixel characters or
	68	for 6x8 pixel characters

For example:

		DISPLAY
		PHRASE	RED,35,THIS,IS,A,TEST

Would result in the display "THIS IS A TEST" appearing in red letters
which are 3x5 pixels big.  This display would appear in the message area
for the current player (player 1 or player 2) automatically.  The display
would only remain in the message area for about 4 seconds but could be
erased or replaced by some other message at will.  Note that a space auto-
matically appeared between the words in the display (not a comma).  Letters
are also automatically uppercased since the message utility does not know
lowercase lettering.

ROM Usage and Word Uniqueness

	It is worth asking right now, what kind of space is being consumed
to store these words and where are they going?  For each word that is used
in a PHRASE or WORD (described later) macro, 2 bytes are declared (overhead)
plus the number of characters in the word itself.  Of course, some code is
generated by these macros too, but that will be discussed later.

	The ROM savings by using these macros comes in the fact that each
word is assumed to be unique (within the first five (5) letters) and can
be reused without generating any storage for the second or additional
references!  Thus, words like "THIS" cost 2 bytes for being a word, and
an additional 4 bytes for the actual letters in the word, but may be referenced
many times at no additional cost!  Note that "THIS" and "This" is the same
since all letters are uppercased.

	The tradeoff in this technique is that words are unique within five (5)
letters.  Thus THINK and THINKER appear to be the same word.  Whichever was
first referenced will be the one used.  (It is hoped to fix this in the (far)
future.)  Here is how the symbols are generated by the macros, so that later
in this document you will see how to get around this five character uniqueness.

	DISPLAY
	PHRASE	RED,35,THIS,IS,A,Test.

generates the following code in effect:

	org	Last_Used
_THIS	rmb	0
	fcb	'T-'A+11.	* Note that the (-'A+11.) added to each
	fcb	'H-'A+11.	*   ascii character in the word is the
	fcb	'I-'A+11.	*   Williams psuedo standard at the moment
	fcb	'S-'A+11.+END	*   as used by the message utilities.

_IS	rmb	0
	fcb	'I-'A+11.	* The message utilties know that the word
	fcb	'S-'A+11.+END	*   ended by the (+END) added to the last char.

_A	rmb	0
	fcb	'A-'A+11.+END

_TEST.	rmb	0
	fcb	'T-'A+11.
	fcb	'e-'a+11.	* Note that lower case generates the same
	fcb	's-'a+11.	*  code as upper case letters.
	fcb	't-'a+11.
	fcb	$2E+END		* $2E is the translation of a '.'

Last_Used	SET	*

	org	Last.Used
	fdb	_THIS
	fdb	_IS
	fdb	_A
	fdb	_TEST.

Last.Used	SET	*


While these are not the actual lines of code generated, this is an accurate
description of the storage technique itself.  Later, you will see how to use
this technique if you ever really need to evade the five character uniqueness
problem.



..............................MORE TO COME LATER.............................



TEXT

	There are times when you will want to be able to write text on the
screen for reasons other than player messages.  TEXT is able to handle these.
Unlike the DISPLAY macro, TEXT does not automatically erase the text which
you display.

	TEXT takes two arguments, the LONG and the SHORT screen position at
which you wish to start the text display.  To address the absolute middle of
the screen, you would use something like:

	TEXT	$4C,$80

or to address the center of the Sinistar viewing screen:

	TEXT	$3A,$80

Now, you may display the message using the PHRASE and WORD macros just as you
would if you used DISPLAY instead of TEXT.  For example:

	TEXT	$40,$40
	PHRASE	BLUE,57,Text,Test

Remember too, that TEXT does not generate any code.  It merely sets certain
symbols in preperation for assembling the PHRASE and WORD generated code.

